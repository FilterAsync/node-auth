<!DOCTYPE html>
<html lang="en">
<head>
    <%- include ("./includes/resources.ejs") %>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no" />
    <title>Register</title>
</head>
<body>
    <div class="container mt-5 mb-5">
        <div class="card shadow">
            <div class="card-header">
                <h4>
                    <span class="fas fa-sign-in-alt" aria-hidden="true"></span>
                    Register
                </h4>
            </div>
            <div class="card-body">
                <form id="register-form" autocomplete="on" class="needs-validation" novalidate="novalidate">
                    <div id="register-alert" class="alert alert-danger d-none">
                        <span class="fas fa-exclamation-circle" aria-hidden="true"></span>
                        Failed to register.
                    </div>
                    <div class="form-floating mb-4">
                        <input id="username" autocomplete="username" name="username" type="text" placeholder="Username" class="form-control" pattern="^(?=^[^_]+_?[^_]+$)\w{3,20}$" required="required" aria-required="true"
                        aria-describedby="username-hint" aria-errormessage="username-invalid-feedback">
                        <label for="username">
                            Username
                        </label>
                        <small id="username-hint" class="text-muted">
                            Username only contains alphabetic characters (a-z, A-Z), numeric characters (0-9), include an underscore(_), and can be from 3 characters to 20 characters.
                        </small>
                        <div id="username-invalid-feedback" class="invalid-feedback" aria-hidden="true">
                            Username only contains alphabetic characters (a-z, A-Z), numeric characters (0-9), include an underscore(_), and can be from 3 characters to 20 characters.
                        </div>
                    </div>
                    <div class="form-floating mb-4">
                        <input id="email" name="email" autocomplete="email" type="text" placeholder="Username" class="form-control" pattern='^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,4}))$' required="required" aria-required="true"
                        aria-describedby="email-hint" aria-errormessage="email-invalid-feedback">
                        <label for="email">
                            Email
                        </label>
                        <small id="email-hint" class="text-muted">
                            Email is your identify on this website and used for most cases (e.g: Retrieving a lost password).
                        </small>
                        <div id="email-invalid-feedback" class="invalid-feedback" aria-hidden="true">
                            Email does not match, please follow this pattern: <em>name@example.domain</em>
                        </div>
                    </div>
                    <div class="form-floating mb-4">
                        <input id="password" name="password" autocomplete="current-password" type="password" placeholder="Username" class="form-control" minlength="8" required="required" aria-required="true"
                        aria-describedby="password-hint" aria-errormessage="password-invalid-feedback">
                        <label for="password">
                            Password
                        </label>
                        <small id="password-hint" class="text-muted">
                            Password must be at least 8 characters.
                        </small>
                        <div id="password-invalid-feedback" class="invalid-feedback" aria-hidden="true">
                            Password must be at least 8 characters.
                        </div>
                    </div>
                    <button type="submit" disabled class="btn btn-primary">Register</button>
                </form>
            </div>
            <div class="card-footer text-center">
                <a href="/login" target="_self">
                    Already have an account
                </a>
                <span class="mx-2" aria-hidden="true">
                    &bull;
                </span>
                <a href="/about" target="_self">
                    About
                </a>
                <div role="separator" class="mb-4" aria-hidden="true"></div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
    (function() {
        const username = $("#username"),
        email = $("#email"),
        password = $("#password"),
        alert = $("#register-alert"),
        submitBtn = $("form > button[type='submit']");
        [username, email, password].forEach(field => {
            field.on("input", function() {
                if (username.val() && email.val() && password.val()) {
                    submitBtn.removeDisableAttr();
                    return;
                } 
                submitBtn.addDisableAttr();
            });
        });
        [username, email].forEach(field => {
            field.on("change", async function() {
                const name = $(this).prop("name"),
                value = $(this).val(),
                invalidFeedback = $("#" + name + "-invalid-feedback"),
                hint = $("#" + name + "-hint"),
                request = new Request(
                    `/available?field=${name}&value=${value}`, {
                    method: "POST",
                    headers: new Headers({
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }),
                });
                const response = await fetch(request);
                const body = await response.json();
                if (body.wasTaken) {
                    hint.bootstrapHide();
                    console.log(name.toString())
                    invalidFeedback.html(`
                        ${name[0].toUpperCase() + name.slice(1)} was taken. If it is yours, please <a href="/login">Login</a>.
                    `);
                    hint.bootstrapHide();
                    field.showValidate();
                    throw new Error("Credentials was taken.");
                }
                hint.bootstrapShow();
                field.hideValidate();
                invalidFeedback.html(`
                    ${name === "username" 
                    ? "Username only contains alphabetic characters (a-z, A-Z), numeric characters (0-9), include an underscore(_), and can be from 3 characters to 20 characters." 
                    : "Email does not match, please follow this pattern: <em>name@example.domain</em>."}
                `);
            });
        });
        const forms = document.querySelectorAll(".needs-validation");
        Array.prototype.slice.call(forms).forEach(form => {
            form.addEventListener("submit", async event => {
                event.preventDefault();
                event.stopPropagation();
                submitBtn.addDisableAttr();
                form.classList.add("was-validated");
                if (!form.checkValidity()) {
                    submitBtn.removeDisableAttr();
                    ["username", "email", "password"]
                    .forEach(field => {
                        $("#" + field + "-hint").bootstrapHide();
                    });
                    return;
                }
                const request = new Request("/register", {
                    method: "POST",
                    headers: new Headers({
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                    }),
                    body: JSON.stringify({
                        username: username.val(),
                        email: email.val(),
                        password: password.val(),
                    }),
                });
                const response = await fetch(request);
                try {
                    var body = await response.json();
                } catch {
                    body = void 0;
                }
                if (!response.ok) {
                    const message = body?.message || "Failed to register."
                    submitBtn.removeDisableAttr();
                    alert.attr("class", "alert alert-danger")
                        .html(`
                        <strong class="semi-bold">
                            Error!
                        </strong>
                        <p>${message}</p>
                    `);
                    throw new Error(message);
                }
                username.off("input").off("change")
                email.off("input").off("change")
                password.off("input");
                redirect(body.vlink);
            });
        });
    })();
    </script>
</body>
</html>
